row.names = NULL,
fileEncoding = "latin1"
) # needed because of Ü comment
# add needed paramters from Bags into dataframes
df_16 <- data.frame(
depth = B22_data_16[["Tiefe..mittlere."]],
d18O  = B22_data_16[["d18O"]],
dD    = B22_data_16[["dD"]],
bag      = rep("Bag16", nrow(B22_data_16))
)
df_17 <- data.frame(
depth = B22_data_17[["Tiefe..mittlere."]],
d18O  = B22_data_17[["d18O"]],
dD   = B22_data_17[["dD"]],
bag      = rep("Bag17", nrow(B22_data_17))
)
df_24 <- data.frame(
depth = B22_data_24[["Tiefe..mittlere."]],
d18O = B22_data_24[["d18O"]],
dD   = B22_data_24[["dD"]],
bag      = rep("Bag24", nrow(B22_data_24))
)
# min depth as offset for depth assignment
off_16 <- 15
off_17 <- 16
off_24 <- 23
df_16 <- df_16 %>% mutate(depth_off = depth + off_16)
df_17 <- df_17 %>% mutate(depth_off = depth + off_17)
df_24 <- df_24 %>% mutate(depth_off = depth + off_24)
df_16_17 <- bind_rows(df_16, df_17)
#-----------------------------------------------------------
# create combined data frames for each Bag with discrete and CFA Data
bag24_combined <- bind_rows(
df_24 %>%
select(depth = depth_off, d18O) %>%
mutate(source = "Bag24", type = "Discrete"),
cfa_24 %>%
select(depth = depth_c, d18O = d18O_c) %>%
mutate(source = "Bag24", type = "CFA (cleaned)"),
cfa_24 %>%
select(depth = depth, d18O = d18O) %>%
mutate(source = "Bag24", type = "CFA"))
bag1617_combined <- bind_rows(
df_16_17 %>%
select(depth = depth_off, d18O) %>%
mutate(source = "Bag16/17", type = "Discrete"),
cfa_1617 %>%
select(depth = depth_c, d18O = d18O_c) %>%
mutate(source = "Bag16/17", type = "CFA (cleaned)"),
cfa_1617 %>%
select(depth = depth, d18O = d18O) %>%
mutate(source = "Bag16/17", type = "CFA")
)
#---------------------------------------------------------------
# plot results
ggplot(bag24_combined, aes(x = depth, y = d18O, color = type)) +
geom_point(data = subset(bag24_combined, type == "Discrete"), size = 3, shape = 3) +
geom_line(data = subset(bag24_combined, type == "CFA (cleaned)"), linewidth = 0.5) +
geom_line(data = subset(bag24_combined, type == "CFA"), linewidth = 0.5, linetype = "dashed") +
scale_color_viridis_d(option = "C", begin = 0, end = 0.85) +
labs(
x = "Depth [m]",
y = expression(delta^18*O~"[\u2030]"),
color = "Data Type"
) +
theme_minimal() +
theme(
legend.position = c(0.85, 0.7),  # x, y coordinates between 0 and 1
legend.background = element_rect(fill = alpha("white", 0.6), color = NA),
legend.box.background = element_rect(color = "black"),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.key.size = unit(0.8, "lines")
)
ggplot(bag1617_combined, aes(x = depth, y = d18O, color = type)) +
geom_point(data = subset(bag1617_combined, type == "Discrete"), size = 3, shape = 3) +
geom_line(data = subset(bag1617_combined, type == "CFA (cleaned)"), linewidth = 0.5) +
geom_line(data = subset(bag1617_combined, type == "CFA"), linewidth = 0.5, linetype = "dashed") +
scale_color_viridis_d(option = "C", begin = 0, end = 0.85) +
labs(
x = "Depth [m]",
y = expression(delta^18*O~"[\u2030]"),
color = "Data Type"
) +
theme_minimal()+
theme(
legend.position = c(0.85, 0.7),  # x, y Koordinaten zwischen 0 und 1 (rechts unten)
legend.background = element_rect(fill = alpha("white", 0.7), color = NA),  # halbtransparenter Hintergrund
legend.box.background = element_rect(color = "black"), # Rahmen um Legende
legend.text = element_text(size = 14),       # Größe der Beschriftung
legend.title = element_text(size = 14),      # Größe des Titels ("Datentyp" z.B.)
legend.key.size = unit(0.8, "lines")          # Größe der Legenden-Symbole
)
#----------------------------------------------------------------------
# save plots
ggsave(
filename = paste0("plots/", "B22_Bag1617timeseries.pdf"),
plot = bag1617_plot,
width = 6,
height = 4
)
# Evaluation of B22 CFA Data in comparison to B22 discrete data (1 cm) resolution measured in April 2025 for Bag 16, 17 and 24, which all contain melt layers, which were identified, measured and documented by Samira Zander
#'
#-------------------------------------
#import packages
library(dplyr)
library(ggplot2)
#-------------------------------------------------------
# define depths of melt layers
melt_layers_16_17 <- c(16.0955, 16.0765, 16.009, 15.988)
melt_layers_24 <- c(23.314, 23.174)
#--------------------------------------------------------------------
# read in CFA Data from B22 core
B22_cfa_data <- read.csv(
"C:\\Users\\maili\\Documents\\Bachelorarbeit\\Isotopendaten\\B22_CFA\\ExNGT_B22_Full-core_processed_cleaned_vs_NOT-cleaned_070425(2)(ExNGT_B22_039_002_online data).csv",
skip = 1,
header = TRUE,
fileEncoding = "latin1"
,
check.names = TRUE,
stringsAsFactors = FALSE
)
#names(B22_data) <- make.names(names(B22_data), unique = TRUE) # assign names
site_name <- "B22_cfa" # assign site name - not to be confused with discretly measured B22
# create data frame with d018 isotope data and corresponding depth
f_B22_cleaned_data <- data.frame(iso = B22_cfa_data$`d18O....`, depth = B22_cfa_data$`Depth..m.`) # cleaned isotope Data
f_B22_data <- data.frame(iso = B22_cfa_data$`d18O.....1`, depth = B22_cfa_data$`Depth..m..1`) # not cleaned isotope Data
# reverse data so it starts at the lowest depth
f_B22_data_rev <- f_B22_data[nrow(f_B22_data):1, ]
# create depth interval to calculate psd over a specific depth for Bag 16/17
f_B22_data_rev1617 <- f_B22_data_rev[f_B22_data_rev$depth >= 15 &
f_B22_data_rev$depth <= 17, ]
# create depth interval to calculate psd over a specific depth for Bag 24
f_B22_data_rev24 <- f_B22_data_rev[f_B22_data_rev$depth >= 23 &
f_B22_data_rev$depth <= 24, ]
# reverse data so it starts at the lowest depth
f_B22_cleaned_data_rev <- f_B22_cleaned_data[nrow(f_B22_cleaned_data):1, ]
# create depth interval to calculate psd over a specific depth for Bag 16/17
f_B22_cleaned_data_rev1617 <- f_B22_cleaned_data_rev[f_B22_cleaned_data_rev$depth >= 15 &
f_B22_data_rev$depth <= 17, ]
# create depth interval to calculate psd over a specific depth for Bag 24
f_B22_cleaned_data_rev24 <- f_B22_cleaned_data_rev[f_B22_cleaned_data_rev$depth >= 23 &
f_B22_data_rev$depth <= 24, ]
# extract d018 isotope and depth data for Bag 16/17
B22_iso_1617 <- f_B22_data_rev1617$iso
B22_depth_1617 <- f_B22_data_rev1617$depth
# extract d018 isotope and depth data for Bag 24
B22_iso_24 <- f_B22_data_rev24$iso
B22_depth_24 <- f_B22_data_rev24$depth
# extract d018 isotope and data Bag 16/17
B22_cleaned_iso_1617 <- f_B22_cleaned_data_rev1617$iso
B22_cleaned_depth_1617 <- f_B22_cleaned_data_rev1617$depth
# extract d018 isotope and depth data Bag 24
B22_cleaned_iso_24 <- f_B22_cleaned_data_rev24$iso
B22_cleaned_depth_24 <- f_B22_cleaned_data_rev24$depth
# create dataframe for Bags 16/17 and Bag 24 with both cleaned and uncleaned data
cfa_24 <- data.frame(
depth_c = B22_cleaned_depth_24,
d18O_c = B22_cleaned_iso_24,
depth = B22_depth_24,
d18O = B22_iso_24,
bag = "Bag24"
)
cfa_1617 <- data.frame(
depth_c = B22_cleaned_depth_1617,
d18O_c = B22_cleaned_iso_1617,
depth = B22_depth_1617,
d18O = B22_iso_1617,
bag = "Bag16/17"
)
#------------------------------------------------------------------------------
# read in discrete B22 data
# read in Bag 16
B22_data_16 <- read.csv2(
"C:/Users/maili/Documents/Bachelorarbeit/Isotopendaten/B22_1cm/Probenliste_ExNGTB22_diskrete_melttest_mbeh(ExNGTB22 Bag 16).csv",
header = TRUE,
row.names = NULL
)
# read in Bag 17
B22_data_17 <- read.csv2(
"C:/Users/maili/Documents/Bachelorarbeit/Isotopendaten/B22_1cm/Probenliste_ExNGTB22_diskrete_melttest_mbeh(ExNGTB22 Bag 17).csv",
header = TRUE,
row.names = NULL
)
# read in Bag 24
B22_data_24 <- read.csv2(
"C:/Users/maili/Documents/Bachelorarbeit/Isotopendaten/B22_1cm/Probenliste_ExNGTB22_diskrete_melttest_mbeh(ExNGTB22 Bag 24).csv",
header = TRUE,
row.names = NULL,
fileEncoding = "latin1"
) # needed because of Ü comment
# add needed paramters from Bags into dataframes
df_16 <- data.frame(
depth = B22_data_16[["Tiefe..mittlere."]],
d18O  = B22_data_16[["d18O"]],
dD    = B22_data_16[["dD"]],
bag      = rep("Bag16", nrow(B22_data_16))
)
df_17 <- data.frame(
depth = B22_data_17[["Tiefe..mittlere."]],
d18O  = B22_data_17[["d18O"]],
dD   = B22_data_17[["dD"]],
bag      = rep("Bag17", nrow(B22_data_17))
)
df_24 <- data.frame(
depth = B22_data_24[["Tiefe..mittlere."]],
d18O = B22_data_24[["d18O"]],
dD   = B22_data_24[["dD"]],
bag      = rep("Bag24", nrow(B22_data_24))
)
# min depth as offset for depth assignment
off_16 <- 15
off_17 <- 16
off_24 <- 23
df_16 <- df_16 %>% mutate(depth_off = depth + off_16)
df_17 <- df_17 %>% mutate(depth_off = depth + off_17)
df_24 <- df_24 %>% mutate(depth_off = depth + off_24)
df_16_17 <- bind_rows(df_16, df_17)
#-----------------------------------------------------------
# create combined data frames for each Bag with discrete and CFA Data
bag24_combined <- bind_rows(
df_24 %>%
select(depth = depth_off, d18O) %>%
mutate(source = "Bag24", type = "Discrete"),
cfa_24 %>%
select(depth = depth_c, d18O = d18O_c) %>%
mutate(source = "Bag24", type = "CFA (cleaned)"),
cfa_24 %>%
select(depth = depth, d18O = d18O) %>%
mutate(source = "Bag24", type = "CFA"))
bag1617_combined <- bind_rows(
df_16_17 %>%
select(depth = depth_off, d18O) %>%
mutate(source = "Bag16/17", type = "Discrete"),
cfa_1617 %>%
select(depth = depth_c, d18O = d18O_c) %>%
mutate(source = "Bag16/17", type = "CFA (cleaned)"),
cfa_1617 %>%
select(depth = depth, d18O = d18O) %>%
mutate(source = "Bag16/17", type = "CFA")
)
#---------------------------------------------------------------
# plot results
bag24_plot <- ggplot(bag24_combined, aes(x = depth, y = d18O, color = type)) +
geom_point(data = subset(bag24_combined, type == "Discrete"), size = 3, shape = 3) +
geom_line(data = subset(bag24_combined, type == "CFA (cleaned)"), linewidth = 0.5) +
geom_line(data = subset(bag24_combined, type == "CFA"), linewidth = 0.5, linetype = "dashed") +
scale_color_viridis_d(option = "C", begin = 0, end = 0.85) +
labs(
x = "Depth [m]",
y = expression(delta^18*O~"[\u2030]"),
color = "Data Type"
) +
theme_minimal() +
theme(
legend.position = c(0.85, 0.7),  # x, y coordinates between 0 and 1
legend.background = element_rect(fill = alpha("white", 0.6), color = NA),
legend.box.background = element_rect(color = "black"),
legend.text = element_text(size = 14),
legend.title = element_text(size = 14),
legend.key.size = unit(0.8, "lines")
)
bag1617_plot <- ggplot(bag1617_combined, aes(x = depth, y = d18O, color = type)) +
geom_point(data = subset(bag1617_combined, type == "Discrete"), size = 3, shape = 3) +
geom_line(data = subset(bag1617_combined, type == "CFA (cleaned)"), linewidth = 0.5) +
geom_line(data = subset(bag1617_combined, type == "CFA"), linewidth = 0.5, linetype = "dashed") +
scale_color_viridis_d(option = "C", begin = 0, end = 0.85) +
labs(
x = "Depth [m]",
y = expression(delta^18*O~"[\u2030]"),
color = "Data Type"
) +
theme_minimal()+
theme(
legend.position = c(0.85, 0.7),  # x, y Koordinaten zwischen 0 und 1 (rechts unten)
legend.background = element_rect(fill = alpha("white", 0.7), color = NA),  # halbtransparenter Hintergrund
legend.box.background = element_rect(color = "black"), # Rahmen um Legende
legend.text = element_text(size = 14),       # Größe der Beschriftung
legend.title = element_text(size = 14),      # Größe des Titels ("Datentyp" z.B.)
legend.key.size = unit(0.8, "lines")          # Größe der Legenden-Symbole
)
#----------------------------------------------------------------------
# save plots
ggsave(
filename = paste0("plots/", "B22_Bag1617timeseries.pdf"),
plot = bag1617_plot,
width = 6,
height = 4
)
ggsave(
filename = paste0("plots/", "B22_Bag24timeseries.pdf"),
plot = bag24_plot,
width = 6,
height = 4
)
#####
#' This estimates the diffusionlength for the B22 core with isotope data obtained with CFA measurements, which include "cleaned" and "not cleaned" data - where all data that results in a loss of signal was removed
#-------------------------------------
#import packages
library(PaleoSpec)
library(dplyr)
library(cmdstanr)
library(posterior)
library(ggplot2)
source("C:/Users/maili/Documents/Bachelorarbeit/IceDiffusionTools-main/all_functions.R")
source("C:/Users/maili/Documents/Bachelorarbeit/paleospec-master/paleospec-master/R/gg_spec_depth.R") # ggspec with renamed axis
source("C:/Users/maili/Documents/Bachelorarbeit/paleospec-master/paleospec-master/R/MakeEquidistant_ts_depth.R") # added a return of the depth in MakeEquidistant
#-------------------------------------------------------
# define path for fitting model from Ice Diffusion Tools
diffusion_length_path <- "C:/Users/maili/Documents/Bachelorarbeit/IceDiffusionTools-main/diffusion_length_fit.stan"
#------------------------------------------------------
# read in isotopedata
B22_data <- read.csv("C:\\Users\\maili\\Documents\\Bachelorarbeit\\Isotopendaten\\B22_CFA\\ExNGT_B22_Full-core_processed_cleaned_vs_NOT-cleaned_070425(2)(ExNGT_B22_039_002_online data).csv",
skip = 1, header = TRUE,  fileEncoding = "latin1"
, check.names = TRUE, stringsAsFactors = FALSE    )
#names(B22_data) <- make.names(names(B22_data), unique = TRUE) # assign names
site_name <- "B22_cfa" # assign site name - not to be confused with discretly measured B22
# create data frame with d018 isotope data and corresponding depth
#f_B22_data <- data.frame(iso = B22_data$`d18O....`,depth = B22_data$`Depth..m.`) # cleaned isotope Data
f_B22_data <- data.frame(iso = B22_data$`d18O.....1`,depth = B22_data$`Depth..m..1`) # not cleaned isotope Data
f_B22_data_rev <- f_B22_data[nrow(f_B22_data):1, ] # reverse data so it starts at the lowest depth
# calculate psd over a specific depth
depth_range <-f_B22_data_rev$depth >=14&f_B22_data_rev$depth  <= 22 # define a depth range to be used to calc. spectra
# Extract subset from isotope data
B22_iso <- subset(f_B22_data_rev$iso, depth_range)
B22_depth <- subset(f_B22_data_rev$depth, depth_range)
# create filter that removes NA values from data - only necessary for cleaned data
#valid_idx <- !is.na(B22_iso) & !is.na(B22_depth)
#B22_iso <- B22_iso[valid_idx] # create subset of data without NA values
#B22_depth <- B22_depth[valid_idx] # create subset of data without NA values
# evenly space data
c.iso <- MakeEquidistant(B22_depth, B22_iso, dt = 0.025)
str(c.iso)
#print(c.iso$depth)
#print(c.iso$ts)
# compare interpolated and original data - debug
pdf(paste0("plots/", site_name, "B22_cfainterpolationcomp.pdf"), width = 6, height = 4)
plot(B22_depth, B22_iso, type = "l", col = "#2a9d8f",
xlab = "Depth [m]", ylab = "δO18 [‰]", main = "")
lines(c.iso$depth, c.iso$ts, col = "#6A4C93")
legend("topright", legend = c("original data", "interpolated data"), col = c("#2a9d8f", "#6A4C93"),
lty = c(1, 1), lwd = 1, cex = 0.5)
dev.off()
B22_iso <- c.iso$ts
B22_depth <- c.iso$depth
sigma = 0.11525661 # define sigma prior
#-----------------------------------------------------
B22_freq <- freq_axis(B22_depth) # create frequency axis
dz <- mean(diff(c.iso$depth)) # define spacing
print(dz) # debug
B22_raw.spec <- raw_spec(c.iso$depth, c.iso$ts) # use raw_spec function to create psd (with detrend = TRUE)
#----------------------------------------------------------
# define variables and constants
alpha <- mean(B22_raw.spec$spec[3:5], na.rm = TRUE) # average the first 5 points without the slowest frequency for the inital spectrum P0 before diffusion
beta <- 0
noise <- 0.1 # noise in [‰]
#print(sigma) # debug
#---------------------------------------------------
B22_theo.iso <- diffusion_spec(B22_freq, alpha, beta, sigma, dz = dz, noise = 0.1) # calculate theoretical PSD after diffusion
B22_theo.spec <- list(freq = B22_freq, spec = B22_theo.iso)# add theoretical frequency to list with theoretical PSD
#----------------------------------------------------------------
#fit data with diffusion_length_fit.stan for the diffusion length fit estimate
B22_results <- new_diffusion_length_estimate(
model_path = diffusion_length_path,
depth = B22_depth,
rec = B22_iso,
alpha_mean = alpha ,
alpha_sd <- sd(B22_raw.spec$spec[3:5], na.rm = TRUE)*100, #standard deviation is the sd of the alpha value to the power of 10
beta_mean = 0 ,
beta_sd = 0.001 ,
sigma_mean = sigma*2 ,
sigma_sd = 1,
noise_mean = noise * 1.1,
noise_sd = noise / 5
)
saveRDS(B22_results, file = paste0( "results/", "B22_cfa", "_fit_result.rds")) # save fit results
# save fit spectral data in dataframe
B22_fit_spec <- data.frame(
freq = B22_results$specs$freq,
spec = B22_results$specs$fit,
type = "Model Fit")
B22_fit.stats <- # # summarise all variables from fit
B22_results$fit_stats$summary(
variables = NULL,
posterior::default_summary_measures(),
extra_quantiles = ~posterior::quantile2(., probs = c(.0275, .975 ))
)
# plot power spectra from the data, the fit and the theoretical expectation
B22_spec_plot <- gg_spec(list(raw = B22_raw.spec, fit = B22_fit_spec, theory = B22_theo.spec), time_unit = "m")
print(B22_spec_plot)
min_depth <- floor(min(depth))
max_depth <- ceiling(max(depth))
depth_range_str <- paste0(min_depth, "to", max_depth)
print(depth_range_str)
site_name_ <- site_name
ggsave(
filename = paste0("plots/", site_name_, depth_range_str, "_spectrum_plot.pdf"),
plot = B22_spec_plot,
width = 6,
height = 4)
ggsave(
filename = paste0("plots/", site_name_, depth_range_str, "_spectrum_plot.png"),
plot = B22_spec_plot,
width = 6,
height = 4)
# make fit results into dataframe and print
B22_diffusion_est_params <- bind_rows(B22_fit.stats,  .id = "B22_cfa")
print(B22_diffusion_est_params)
# define noise from fit
B22_noise <- B22_diffusion_est_params %>%
filter(variable == "noise") %>%
pull(mean)
print(B22_noise)
# add all diffusion lengths with site and q5 and q95 into dataframe
B22_sigma_summary <- B22_diffusion_est_params %>%
filter(variable == "sigma") %>%
select( mean, q5, q95) %>%
mutate(site = "B22")
B22_sigma_est <- B22_sigma_summary$mean # estimated diffusion lengths
B22_q5 <- B22_sigma_summary$q5 # q5 from estimated diffusion length fit
B22_q25 <- B22_sigma_summary$q95 # q95 from estimated diffusion length fit
print(B22_q5)
print(B22_q25)
print(B22_sigma_est)
#####
#'Creates a Plot comparing the calculated and estimated diffusions lengths of d18O with errors based on the 5th and 95th percentile
#'
#'
#--------------------------
#import packages
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
# load in calculated and estimated Diffusionlengths
source("C:/Users/maili/Documents/Bachelorarbeit/NGT_rechnungen/ALL_ExNGT_GRIP_Diffusion_Est.R")
#####
#'Creates a Plot comparing the calculated and estimated diffusions lengths of d18O with errors based on the 5th and 95th percentile
#'
#'
#--------------------------
#import packages
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
# load in calculated and estimated Diffusionlengths
source("C:/Users/maili/Documents/Bachelorarbeit/NGT_rechnungen/ALL_ExNGT_GRIP_Diffusion_Est.R")
#####
#' This estimates the diffusionlength for the B22 core with isotope data obtained with CFA measurements, which include "cleaned" and "not cleaned" data - where all data that results in a loss of signal was removed
#-------------------------------------
#import packages
library(PaleoSpec)
library(dplyr)
library(cmdstanr)
library(posterior)
library(ggplot2)
source("C:/Users/maili/Documents/Bachelorarbeit/IceDiffusionTools-main/all_functions.R")
source("C:/Users/maili/Documents/Bachelorarbeit/paleospec-master/paleospec-master/R/gg_spec_depth.R") # ggspec with renamed axis
source("C:/Users/maili/Documents/Bachelorarbeit/paleospec-master/paleospec-master/R/MakeEquidistant_ts_depth.R") # added a return of the depth in MakeEquidistant
#-------------------------------------------------------
# define path for fitting model from Ice Diffusion Tools
diffusion_length_path <- "C:/Users/maili/Documents/Bachelorarbeit/IceDiffusionTools-main/diffusion_length_fit.stan"
#------------------------------------------------------
# read in isotopedata
cleaned_B22_data <- read.csv("C:\\Users\\maili\\Documents\\Bachelorarbeit\\Isotopendaten\\B22_CFA\\ExNGT_B22_Full-core_processed_cleaned_vs_NOT-cleaned_070425(2)(ExNGT_B22_039_002_online data).csv",
skip = 1, header = TRUE,  fileEncoding = "latin1"
, check.names = TRUE, stringsAsFactors = FALSE    )
#names(B22_data) <- make.names(names(B22_data), unique = TRUE) # assign names
site_name <- "cleaned_B22_cfa" # assign site name - not to be confused with discretly measured cleaned_B22
# create data frame with d018 isotope data and corresponding depth
f_cleaned_B22_data <- data.frame(iso = cleaned_B22_data$`d18O....`,depth = cleaned_B22_data$`Depth..m.`) # cleaned isotope Data
f_cleaned_B22_data_rev <- f_cleaned_B22_data[nrow(f_cleaned_B22_data):1, ] # reverse data so it starts at the lowest depth
depth_range <-f_cleaned_B22_data_rev$depth >=14 &f_cleaned_B22_data_rev$depth  <= 22 # define a depth range to be used to calc. spectra
# Extract subset from isotope data
cleaned_B22_iso <- subset(f_cleaned_B22_data_rev$iso, depth_range)
cleaned_B22_depth <- subset(f_cleaned_B22_data_rev$depth, depth_range)
# create filter that removes NA values from data - only necessary for cleaned data#
valid_idx <- !is.na(cleaned_B22_iso) & !is.na(cleaned_B22_depth)
cleaned_B22_iso <- cleaned_B22_iso[valid_idx] # create subset of data without NA values
cleaned_B22_depth <- cleaned_B22_depth[valid_idx] # create subset of data without NA values
# evenly space data
c.iso <- MakeEquidistant(cleaned_B22_depth, cleaned_B22_iso, dt = 0.025)
str(c.iso)
#print(c.iso$depth)
#print(c.iso$ts)
# compare interpolated and original data - debug
pdf(paste0("plots/", site_name, "cleaned_B22_cfainterpolationcomp.pdf"), width = 6, height = 4)
#####
#'Creates a Plot comparing the calculated and estimated diffusions lengths of d18O with errors based on the 5th and 95th percentile
#'
#'
#--------------------------
#import packages
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
# load in calculated and estimated Diffusionlengths
source("C:/Users/maili/Documents/Bachelorarbeit/NGT_rechnungen/ALL_ExNGT_GRIP_Diffusion_Est.R")
#####
#'Creates a Plot comparing the calculated and estimated diffusions lengths of d18O with errors based on the 5th and 95th percentile
#'
#'
#--------------------------
#import packages
library(tidyr)
library(ggplot2)
library(dplyr)
library(viridis)
# load in calculated and estimated Diffusionlengths
source("C:/Users/maili/Documents/Bachelorarbeit/NGT_rechnungen/ALL_ExNGT_GRIP_Diffusion_Est.R")
